\[[Home](/index/)\]\[[Page en Fran&ccedil;ais](/libsapfr/)\]

###LibSAP

LibSAP is a library for handling SAP archives written in ANSI C. It provides both low-level routines handling SAP archives considered as physical format (disk images) and high-level routines handling SAP archives considered as logic format (compatible with DOS BASIC Thomson).

* <a href="#open_archive">Open a SAP archive</a><br>
* <a href="#create_archive">Create a SAP archive</a><br>
* <a href="#close_archive">Close a SAP archive</a><br>
* <a href="#fill_archive">Fill a SAP archive</a><br>
* <a href="#read_sector">Read a SAP sector</a><br>
* <a href="#read_sectors">Read a range of SAP sectors</a><br>
* <a href="#write_sector">Write a SAP sector</a><br>
* <a href="#write_sectors">Write a range of SAP sectors</a><br>
* <a href="#format_archive">Format a SAP archive</a><br>
* <a href="#list_archive">Store the directory of a SAP archive</a><br>
* <a href="#add_file">Add a file to a SAP archive</a><br>
* <a href="#delete_file">Delete a file in a SAP archive</a><br>
* <a href="#exract_file">Extract a file from a SAP archive</a><br>
* <a href="#read_informations">Get informations of a SAP file</a>

#####Open a SAP archive<a name="open_archive"></a>

**sapID sap\_OpenArchive(const char filename\[\], int \*format);**<br>
<span style="padding-left:30px">*filename : name of the SAP archive*</span><br>
<span style="padding-left:30px">*format : return of the archive format (SAP\_FORMAT1 or SAP\_FORMAT2)*</span><br><br>
Returns the identifier of the SAP archive. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_ETOOMANY` : too many SAP archives are opened simultaneously.<br>
`SAP_ENOENT` : specified SAP archive does not exist.<br>
`SAP_EBADF` : The specified file is not a SAP archive.

#####Create a SAP archive<a name="create_archive"></a>

**sapID sap\_CreateArchive(const char filename\[\], int format);**<br>
<span style="padding-left:30px">*filename : name of the SAP archive*</span><br>
<span style="padding-left:30px">*format : archive format (SAP\_FORMAT1 or SAP\_FORMAT2)*</span><br><br>
Returns the identifier of the SAP archive. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_ETOOMANY` : too many SAP archives are opened simultaneously.<br>
`SAP_EPERM` : Can not create file on the recording medium.

#####Close a SAP archive<a name="close_archive"></a>

**int sap\_CloseArchive(sapID id);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*<br><br>
Returns `SAP_OK`. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.

#####Fill a SAP archive<a name="fill_archive"></a>

**int sap_FillArchive(sapID id, sapsector_t \*sapsector);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*sapsector : pointer to a sector structure*</span><br><br>
Fills an archive created by sap_CreateArchive () sector by sector, starting from sector 1 of track 0. At each call, the sector number is incremented by 1 and, if the current track becomes full, the next track is selected.<br>
Returns `SAP_OK`. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_ENOSPC` : SAP archive is full.

#####Read a SAP sector<a name="read_sector"></a>

**int sap_ReadSector(sapID id, int track, int sect, sapsector_t \*sapsector);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*track : track number*</span><br>
<span style="padding-left:30px">*sect : sector number*</span><br>
<span style="padding-left:30px">*sapsector : pointer to a sector structure*</span><br><br>
The result is in the structure `sapsector`.<br>
Returns `SAP_OK flags` or a combination of the following codes:<br>
`SAP_NO_STD_FMT` : the format is non-standard sector.
`SAP_PROTECTED` : the sector is write protected.
`SAP_BAD_SECTOR` : the sector has bad identifiers (track, sector)
`SAP_CRC_ERROR` : CRC error on data sector.
On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>  `SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : archive the SAP is being filled by sap_FillArchive ()

#####Read a range of SAP sectors<a name="read_sectors"></a>

**int sap\_ReadSectorEx(sapID id, int track, int sect, int nsects, unsigned char data\[\]);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*track : track number to start from*</span><br>
<span style="padding-left:30px">*sect : sector number to start from*</span><br>
<span style="padding-left:30px">*nsect : number of sectors to read*</span><br>
<span style="padding-left:30px">*data : buffer large enough to store sectors*</span>><br><br>
Returns `SAP_OK`. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()

#####Write a SAP sector<a name="write_sector"></a>

**int sap\_WriteSector(sapID id, int track, int sect, sapsector\_t \*sapsector);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*track : track number*</span><br>
<span style="padding-left:30px">*sect : sector number*</span><br>
<span style="padding-left:30px">*sapsector : pointer to a sector structure*</span><br><br>
All fields in the sector must be specified, except the two fields for the CRC which will be calculated by the routine itself.<br>
Returns `SAP_OK`. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()

#####Write a range of SAP sectors<a name="write_sectors"></a>

**int sap\_WriteSectorEx(sapID id, int track, int sect, int nsects, const unsigned char data\[\]);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*track : track number to start from*</span><br>
<span style="padding-left:30px">*sect : sector number to start from*</span><br>
<span style="padding-left:30px">*nsect : number of sectors to write*</span><br>
<span style="padding-left:30px">*data : buffer of sectors*</span><br><br>
Returns `SAP_OK`. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()

#####Format a SAP archive<a name="format_archive"></a>

**int sap\_FormatArchive(sapID id, int capacity);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br><br>
<span style="padding-left:30px">*capacity : SAP_TRK80 (80 tracks) or SAP_TRK40 (40 tracks)*</span><br><br>
Returns `SAP_OK`. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()

#####Store the directory of a SAP archive<a name="list_archive"></a>

**int sap\_ListArchive(sapID id, char buffer\[\], int buffer_size);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*buffer : buffer for list of files*</span><br>
<span style="padding-left:30px">*buffer_size : size of buffer*</span><br><br>
Returns the number of lines of the list. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()

#####Add a file to a SAP archive<a name="add_file"></a>

**int sap\_AddFile(sapID id, const char filename\[\]);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*filename : name of the file to add*</span><br><br>
Returns the size of the file added in bytes. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()<br>
`SAP_ENOENT` : the file does not exist.<br>
`SAP_ENFILE` : the file is empty.<br>
`SAP_ENOSPC` : the SAP archive directory is full.<br>
`SAP_EFBIG` : the file is too big compared with the free space of the SAP archive.

#####Delete a file in a SAP archive<a name="delete_file"></a>

**int sap\_DeleteFile(sapID id, const char pattern\[\]);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*pattern : pattern of the file(s) to delete ('\*' and '?' are supported)*</span><br><br>
Returns the size of the file(s) deleted in bytes. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()<br>
`SAP_ENOENT` : the file does not exist.

#####Extract a file from a SAP archive<a name="exract_file"></a>

**int sap\_ExtractFile(sapID id, const char pattern\[\]);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*pattern : pattern of the file(s) to extract ('\*' and '?' are supported)*</span><br><br>
Returns the size of the file(s) extracted in bytes. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()<br>
`SAP_ENOENT` : the file does not exist in the SAP archive (invalid error when `pattern` contains at least one wildcard).<br>
`SAP_EPERM` : Can not write the file to the media.

#####Get informations of a SAP file<a name="read_informations"></a>

**int sap\_GetFileInfo(sapID id, const char filename\[\], sapfileinfo\_t \*info);**<br>
<span style="padding-left:30px">*id : identifier of the SAP archive*</span><br>
<span style="padding-left:30px">*filename : name of the file to examine*</span><br><br>
Returns `SAP_OK`. On failure, `SAP_ERROR` is returned and the `sap_errno` variable is set to one of the following error codes:<br>
`SAP_EINVAL` : SAP archive identifier (SAPID) is invalid.<br>
`SAP_EEMPTY` : SAP archive is empty.<br>
`SAP_EBUSY` : SAP archive is being filled by sap_FillArchive ()<br>
`SAP_ENOENT` : the file does not exist.

-----

<center><p>Teo developers &copy; 1997-2012</p></center>

